// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package ecom

import (
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
)

type EcomService interface {
	GetTask(ctx context.Context, req *GetTaskReq) (r *GetTaskResp, err error)

	CreateTask(ctx context.Context, req *CreateTaskReq) (r *CreateTaskResp, err error)
}

type EcomServiceGetTaskArgs struct {
	Req *GetTaskReq `thrift:"req,1" frugal:"1,default,GetTaskReq" json:"req"`
}

func NewEcomServiceGetTaskArgs() *EcomServiceGetTaskArgs {
	return &EcomServiceGetTaskArgs{}
}

func (p *EcomServiceGetTaskArgs) InitDefault() {
}

var EcomServiceGetTaskArgs_Req_DEFAULT *GetTaskReq

func (p *EcomServiceGetTaskArgs) GetReq() (v *GetTaskReq) {
	if !p.IsSetReq() {
		return EcomServiceGetTaskArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EcomServiceGetTaskArgs) SetReq(val *GetTaskReq) {
	p.Req = val
}

var fieldIDToName_EcomServiceGetTaskArgs = map[int16]string{
	1: "req",
}

func (p *EcomServiceGetTaskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EcomServiceGetTaskArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EcomServiceGetTaskArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EcomServiceGetTaskArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTaskReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EcomServiceGetTaskArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetTask_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EcomServiceGetTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EcomServiceGetTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EcomServiceGetTaskArgs(%+v)", *p)

}

func (p *EcomServiceGetTaskArgs) DeepEqual(ano *EcomServiceGetTaskArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EcomServiceGetTaskArgs) Field1DeepEqual(src *GetTaskReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EcomServiceGetTaskResult struct {
	Success *GetTaskResp `thrift:"success,0,optional" frugal:"0,optional,GetTaskResp" json:"success,omitempty"`
}

func NewEcomServiceGetTaskResult() *EcomServiceGetTaskResult {
	return &EcomServiceGetTaskResult{}
}

func (p *EcomServiceGetTaskResult) InitDefault() {
}

var EcomServiceGetTaskResult_Success_DEFAULT *GetTaskResp

func (p *EcomServiceGetTaskResult) GetSuccess() (v *GetTaskResp) {
	if !p.IsSetSuccess() {
		return EcomServiceGetTaskResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EcomServiceGetTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTaskResp)
}

var fieldIDToName_EcomServiceGetTaskResult = map[int16]string{
	0: "success",
}

func (p *EcomServiceGetTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EcomServiceGetTaskResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EcomServiceGetTaskResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EcomServiceGetTaskResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTaskResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EcomServiceGetTaskResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("GetTask_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EcomServiceGetTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EcomServiceGetTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EcomServiceGetTaskResult(%+v)", *p)

}

func (p *EcomServiceGetTaskResult) DeepEqual(ano *EcomServiceGetTaskResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EcomServiceGetTaskResult) Field0DeepEqual(src *GetTaskResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EcomServiceCreateTaskArgs struct {
	Req *CreateTaskReq `thrift:"req,1" frugal:"1,default,CreateTaskReq" json:"req"`
}

func NewEcomServiceCreateTaskArgs() *EcomServiceCreateTaskArgs {
	return &EcomServiceCreateTaskArgs{}
}

func (p *EcomServiceCreateTaskArgs) InitDefault() {
}

var EcomServiceCreateTaskArgs_Req_DEFAULT *CreateTaskReq

func (p *EcomServiceCreateTaskArgs) GetReq() (v *CreateTaskReq) {
	if !p.IsSetReq() {
		return EcomServiceCreateTaskArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EcomServiceCreateTaskArgs) SetReq(val *CreateTaskReq) {
	p.Req = val
}

var fieldIDToName_EcomServiceCreateTaskArgs = map[int16]string{
	1: "req",
}

func (p *EcomServiceCreateTaskArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EcomServiceCreateTaskArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EcomServiceCreateTaskArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EcomServiceCreateTaskArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateTaskReq()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EcomServiceCreateTaskArgs) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTask_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EcomServiceCreateTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EcomServiceCreateTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EcomServiceCreateTaskArgs(%+v)", *p)

}

func (p *EcomServiceCreateTaskArgs) DeepEqual(ano *EcomServiceCreateTaskArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EcomServiceCreateTaskArgs) Field1DeepEqual(src *CreateTaskReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EcomServiceCreateTaskResult struct {
	Success *CreateTaskResp `thrift:"success,0,optional" frugal:"0,optional,CreateTaskResp" json:"success,omitempty"`
}

func NewEcomServiceCreateTaskResult() *EcomServiceCreateTaskResult {
	return &EcomServiceCreateTaskResult{}
}

func (p *EcomServiceCreateTaskResult) InitDefault() {
}

var EcomServiceCreateTaskResult_Success_DEFAULT *CreateTaskResp

func (p *EcomServiceCreateTaskResult) GetSuccess() (v *CreateTaskResp) {
	if !p.IsSetSuccess() {
		return EcomServiceCreateTaskResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EcomServiceCreateTaskResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateTaskResp)
}

var fieldIDToName_EcomServiceCreateTaskResult = map[int16]string{
	0: "success",
}

func (p *EcomServiceCreateTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EcomServiceCreateTaskResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EcomServiceCreateTaskResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EcomServiceCreateTaskResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateTaskResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EcomServiceCreateTaskResult) Write(oprot thrift.TProtocol) (err error) {

	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTask_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EcomServiceCreateTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EcomServiceCreateTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EcomServiceCreateTaskResult(%+v)", *p)

}

func (p *EcomServiceCreateTaskResult) DeepEqual(ano *EcomServiceCreateTaskResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EcomServiceCreateTaskResult) Field0DeepEqual(src *CreateTaskResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
